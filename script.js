// --- Global References ---
const canvas = document.getElementById('cricketCanvas');
const ctx = canvas ? canvas.getContext('2d') : null;
const scoreBoard = document.getElementById('scoreBoard');
const messageBoard = document.getElementById('messageBoard');
const restartButton = document.getElementById('restartButton');
const levelUpMessage = document.getElementById('levelUpMessage');

// --- Log & Check Elements ---
console.log("Element Check:", { canvas, ctx, scoreBoard, messageBoard, restartButton, levelUpMessage });
if (!canvas || !ctx || !scoreBoard || !messageBoard || !restartButton || !levelUpMessage) { const e="ERROR: Critical HTML elements missing."; console.error(e); alert(e); if(messageBoard){messageBoard.textContent="HTML Error!"; messageBoard.style.display='block'; messageBoard.style.backgroundColor='red'; messageBoard.style.color='white';} throw new Error(e); }
console.log("All critical HTML elements found.");

// --- Static Visual Constants ---
const STAND_COLOR_DARK = '#a1887f'; const STAND_COLOR_LIGHT = '#bcaaa4'; const ROOF_COLOR = '#616161';
const CROWD_COLORS = ['#E53935', '#1E88E5', '#FFEB3B', '#4CAF50', '#FFFFFF', '#FF9800', '#9C27B0'];
const GRASS_COLOR_FAR = '#7cb342'; const GRASS_COLOR_NEAR = '#9ccc65'; const PITCH_COLOR_FAR = '#c5e1a5'; const PITCH_COLOR_NEAR = '#e6ee9c';
const WICKET_COLOR_LIGHT = '#f5deb3'; const WICKET_COLOR_DARK = '#d2b48c'; const BAIL_COLOR = '#fff8dc';
const BOUNDARY_ROPE_COLOR = '#ffffff';
const BALL_COLOR_MAIN = '#d32f2f'; const BALL_COLOR_SHADOW = '#a02424'; const BAT_COLOR_FACE = '#efd1a1'; const BAT_COLOR_EDGE = '#d8b886';
const BAT_HANDLE_COLOR = '#5d4037'; const SHADOW_COLOR = 'rgba(0, 0, 0, 0.15)';
const HELMET_RED = '#E53935'; const HELMET_BLUE = '#1E88E5'; const HELMET_GRILL = '#9E9E9E'; const SKIN_TONE = '#FFCCBC'; const SHIRT_BLUE = '#29B6F6'; const PANTS_PADS_WHITE = '#ECEFF1'; const GLOVES_GREY = '#CFD8DC'; const SHOE_BROWN = '#795548'; const BELT_BLACK = '#212121'; const PAD_LINES = '#B0BEC5';
const FIELDING_SHIRT_GREEN = '#4CAF50'; const FIELDING_PANTS_WHITE = '#FAFAFA'; const FIELDING_SKIN_COLOR = '#E0AA90'; const FIELDING_HAIR_COLOR = '#424242';

// --- Dynamic Constants ---
let VANISHING_POINT_Y, HORIZON_Y, PITCH_TOP_Y, PITCH_BOTTOM_Y, PITCH_FAR_WIDTH, PITCH_NEAR_WIDTH;
let BATSMAN_CENTER_X, BATSMAN_FEET_Y, BATSMAN_SCALE;
let WICKET_X, WICKET_Y, WICKET_STUMP_WIDTH, WICKET_STUMP_HEIGHT, WICKET_SPACING, BAIL_HEIGHT, BAIL_LENGTH;
let WICKET_HITBOX_LEFT, WICKET_HITBOX_RIGHT, WICKET_HITBOX_TOP, WICKET_HITBOX_BOTTOM;
let SWING_BAT_PIVOT_X, SWING_BAT_PIVOT_Y, SWING_BAT_WIDTH, SWING_BAT_HEIGHT, SWING_BAT_HANDLE_HEIGHT;
let BALL_MAX_RADIUS, BALL_START_SCALE, BALL_ARC_HEIGHT_FACTOR, GRAVITY_EFFECT_FACTOR;
let OUTWARD_TARGET_Y, OUTWARD_TARGET_X_SPREAD;
let BOWLER_START_X, BOWLER_START_Y, BOWLER_BASE_SCALE;
let NS_WICKET_X, NS_WICKET_Y, NS_WICKET_SCALE, NS_WICKET_STUMP_WIDTH, NS_WICKET_STUMP_HEIGHT, NS_WICKET_SPACING, NS_WICKET_BAIL_HEIGHT, NS_WICKET_BAIL_LENGTH;
let FIELDER_SCALE, FIELDER_LEFT_X_FACTOR, FIELDER_RIGHT_X_FACTOR;
let FIELDER_LEFT_X, FIELDER_LEFT_Y, FIELDER_RIGHT_X, FIELDER_RIGHT_Y;

// --- Gameplay Constants ---
const BASE_BALL_SPEED = 0.0065; const MAX_RANDOM_SPEED = 0.003; const SPEED_PROGRESS_FACTOR_MIN = 0.4; const SPEED_PROGRESS_FACTOR_MAX = 1.1;
const LEVEL_SPEED_INCREASE = 0.00035; const LEVEL_ANGLE_INCREASE = 12; const BASE_ANGLE_RANDOMNESS = 120; const SCORE_PER_LEVEL = 30;
const HIT_POWER_FACTOR = 0.04; const OUTWARD_FRICTION = 0.975; const MIN_OUTWARD_SPEED = 0.0005;
const OUTWARD_PROGRESS_6 = 0.90; const OUTWARD_PROGRESS_4 = 0.70; const OUTWARD_PROGRESS_2 = 0.40; const OUTWARD_PROGRESS_1 = 0.10;

// --- Game Variables ---
let score = 0; let level = 1; let nextLevelScore = SCORE_PER_LEVEL; let gameState = 'LOADING';
let ball = {}; let bat = { swingAngle: 0, swinging: false, swingDirection: 1 }; let bowler = { state: 'IDLE' };
let animationFrameId = null;
let offscreenCanvas = null; let offscreenCtx = null; let staticBackgroundRendered = false;

// *** Sound Effects ***
let wicketSound = null;
try {
    wicketSound = new Audio('sound/BOWLED.mp3'); // Assumes sounds/wicket_hit.mp3 relative to index.html
    console.log("Wicket sound object created.");
} catch (e) { console.error("Failed to create wicket Audio object. Sound won't play.", e); }

// --- Utility Functions ---
function lerp(a, b, t) { return a + (b - a) * t; }
function clamp(value, min, max) { return Math.max(min, Math.min(value, max)); }

// --- Initialize Dimensions ---
function initializeDimensions() {
    console.log("Initializing dimensions...");
    try {
        VANISHING_POINT_Y=canvas.height*0.35; HORIZON_Y=canvas.height*0.45; PITCH_TOP_Y=HORIZON_Y+5; PITCH_BOTTOM_Y=canvas.height*0.98; PITCH_FAR_WIDTH=canvas.width*0.1; PITCH_NEAR_WIDTH=canvas.width*1.4; BATSMAN_SCALE=1.8; BATSMAN_CENTER_X=canvas.width/2; BATSMAN_FEET_Y=PITCH_BOTTOM_Y-5; WICKET_X=BATSMAN_CENTER_X+40; WICKET_Y=PITCH_BOTTOM_Y-70; WICKET_STUMP_WIDTH=8; WICKET_STUMP_HEIGHT=65; WICKET_SPACING=10; BAIL_HEIGHT=5; BAIL_LENGTH=WICKET_STUMP_WIDTH+WICKET_SPACING/2; WICKET_HITBOX_LEFT=WICKET_X-WICKET_SPACING-WICKET_STUMP_WIDTH/2; WICKET_HITBOX_RIGHT=WICKET_X+WICKET_SPACING+WICKET_STUMP_WIDTH/2; WICKET_HITBOX_TOP=WICKET_Y; WICKET_HITBOX_BOTTOM=WICKET_Y+WICKET_STUMP_HEIGHT; SWING_BAT_WIDTH=22; SWING_BAT_HEIGHT=105; SWING_BAT_HANDLE_HEIGHT=38; SWING_BAT_PIVOT_X=BATSMAN_CENTER_X+2*BATSMAN_SCALE; SWING_BAT_PIVOT_Y=BATSMAN_FEET_Y-38*BATSMAN_SCALE; bat.x=SWING_BAT_PIVOT_X; bat.y=SWING_BAT_PIVOT_Y; bat.width=SWING_BAT_WIDTH; bat.height=SWING_BAT_HEIGHT; bat.handleHeight=SWING_BAT_HANDLE_HEIGHT; bat.swingSpeed=0.28; bat.maxSwingAngle=Math.PI/2.2; BALL_MAX_RADIUS=13; BALL_START_SCALE=0.12; BALL_ARC_HEIGHT_FACTOR=0.45; GRAVITY_EFFECT_FACTOR=15; OUTWARD_TARGET_Y=HORIZON_Y-40; OUTWARD_TARGET_X_SPREAD=canvas.width*0.4; NS_WICKET_SCALE=0.35; NS_WICKET_X=canvas.width/2; NS_WICKET_Y=PITCH_TOP_Y+10; NS_WICKET_STUMP_WIDTH=WICKET_STUMP_WIDTH*NS_WICKET_SCALE; NS_WICKET_STUMP_HEIGHT=WICKET_STUMP_HEIGHT*NS_WICKET_SCALE; NS_WICKET_SPACING=WICKET_SPACING*NS_WICKET_SCALE; NS_WICKET_BAIL_HEIGHT=BAIL_HEIGHT*NS_WICKET_SCALE; NS_WICKET_BAIL_LENGTH=BAIL_LENGTH*NS_WICKET_SCALE; BOWLER_BASE_SCALE=1.0; BOWLER_START_X=NS_WICKET_X+(NS_WICKET_STUMP_WIDTH+NS_WICKET_SPACING)*2.5; BOWLER_START_Y=NS_WICKET_Y+NS_WICKET_STUMP_HEIGHT+5; bowler.x=BOWLER_START_X; bowler.y=BOWLER_START_Y; bowler.scale=BOWLER_BASE_SCALE; FIELDER_SCALE=1.6; FIELDER_LEFT_X_FACTOR=0.18; FIELDER_RIGHT_X_FACTOR=0.82; const FIELDER_Y_PROGRESS=0.35; FIELDER_LEFT_X=canvas.width*FIELDER_LEFT_X_FACTOR; FIELDER_RIGHT_X=canvas.width*FIELDER_RIGHT_X_FACTOR; FIELDER_LEFT_Y=lerp(PITCH_TOP_Y,PITCH_BOTTOM_Y,FIELDER_Y_PROGRESS); FIELDER_RIGHT_Y=FIELDER_LEFT_Y;
        console.log("Dimensions initialized."); return true;
    } catch(e){console.error("InitDimensions error:",e); if(messageBoard){messageBoard.textContent="Init Error!"; messageBoard.style.backgroundColor='red';} return false;}
}

// --- Game Setup ---
function resetBallInternal() { if(typeof WICKET_X==='undefined'){console.error("resetBallInternal pre-init.");return;} console.log("Resetting ball..."); const lvlSpd=(level-1)*LEVEL_SPEED_INCREASE; const curSpd=BASE_BALL_SPEED+lvlSpd; const rndSpd=MAX_RANDOM_SPEED; const curAngRnd=BASE_ANGLE_RANDOMNESS+(level-1)*LEVEL_ANGLE_INCREASE; const relOffsetY=-20*bowler.scale; ball={progress:0,targetX:WICKET_X+(Math.random()-0.5)*WICKET_SPACING*1.5,startX:bowler.x,startY:bowler.y+relOffsetY,x:bowler.x,y:bowler.y+relOffsetY,z:0,radius:BALL_MAX_RADIUS*BALL_START_SCALE,baseSpeed:curSpd+Math.random()*rndSpd,angleOffsetX:clamp((Math.random()-0.5)*curAngRnd,-canvas.width*0.4,canvas.width*0.4),arcHeight:(BALL_MAX_RADIUS*2)+Math.random()*canvas.height*(BALL_ARC_HEIGHT_FACTOR+(Math.random()-0.5)*0.1),bounceFactor:0.5+Math.random()*0.3,bounced:false,outwardProgress:0,outwardSpeed:0,outwardTargetX:canvas.width/2,outwardTargetY:OUTWARD_TARGET_Y,impactX:0,impactY:0}; updateBallPositionAndScale(); console.log("Ball created:",ball); }
function startBowlingSequence() { console.log("Starting NEW BALL..."); resetBallInternal(); if(ball&&ball.radius>0){gameState='PLAYING'; console.log("-> PLAYING"); if(messageBoard)messageBoard.style.display='none';} else{console.error("Ball creation failed!"); gameState='ERROR'; if(messageBoard){messageBoard.textContent="Ball Error!"; messageBoard.style.backgroundColor='red';}}}
function updateScoreboard() { if(scoreBoard)scoreBoard.textContent=`Score: ${score} | Level: ${level}`; }
function levelUpCheck() { if(score>=nextLevelScore){level++; nextLevelScore+=SCORE_PER_LEVEL*Math.round(level*1.2); updateScoreboard(); if(levelUpMessage){levelUpMessage.style.display='block'; setTimeout(()=>{if(levelUpMessage)levelUpMessage.style.display='none';},1500);}}}
function resetGame() { console.log("Resetting game -> setup..."); setupInitialState(); }
function setupInitialState() { console.log("Setting up initial state..."); if(animationFrameId){cancelAnimationFrame(animationFrameId); animationFrameId=null; console.log("Cancelled frame.");} score=0; level=1; nextLevelScore=SCORE_PER_LEVEL; updateScoreboard(); if(messageBoard){messageBoard.textContent='Click to Start'; messageBoard.style.display='block'; messageBoard.style.backgroundColor='rgba(211,47,47,0.85)';} if(levelUpMessage)levelUpMessage.style.display='none'; if(restartButton)restartButton.style.display='none'; gameState='READY'; bowler.state='IDLE'; ball={}; bat.swinging=false; bat.swingAngle=0; if(typeof BOWLER_START_X!=='undefined'){bowler.x=BOWLER_START_X; bowler.y=BOWLER_START_Y; bowler.scale=BOWLER_BASE_SCALE; bat.x=SWING_BAT_PIVOT_X; bat.y=SWING_BAT_PIVOT_Y;} if(ctx&&typeof HORIZON_Y!=='undefined'){console.log("Performing initial draw."); try{draw(); console.log("Initial draw ok.");}catch(e){console.error("ERROR initial draw:",e); if(messageBoard){messageBoard.textContent="Render Error!"; messageBoard.style.backgroundColor='red';}}}else{console.error("No initial draw - ctx/dims missing.");}}

// --- Drawing Functions ---
function drawStadiumBackground(targetCtx) { if (!targetCtx || typeof HORIZON_Y === 'undefined'){console.error("No ctx/dims for stadium bg");return;} targetCtx.save(); try{const skyGrad=targetCtx.createLinearGradient(0,0,0,HORIZON_Y); skyGrad.addColorStop(0,'#b0bec5'); skyGrad.addColorStop(1,'#eceff1'); targetCtx.fillStyle=skyGrad; targetCtx.fillRect(0,0,canvas.width,HORIZON_Y); const numTiers=4; const tierBaseHeight=(HORIZON_Y*0.8)/numTiers; let currentTierY=HORIZON_Y; let tierHeight; for(let i=0;i<numTiers;i++){tierHeight=tierBaseHeight*(1-i*0.15); const tierTopY=currentTierY-tierHeight; targetCtx.fillStyle=(i%2===0)?STAND_COLOR_LIGHT:STAND_COLOR_DARK; targetCtx.fillRect(0,tierTopY,canvas.width,tierHeight); const crowdStartY=tierTopY+tierHeight*0.1; const crowdEndY=currentTierY-tierHeight*0.05; const crowdDensity=0.15/(i+1); for(let cy=crowdStartY; cy<crowdEndY; cy+=3){for(let cx=0; cx<canvas.width; cx+=4){if(Math.random()<crowdDensity){targetCtx.fillStyle=CROWD_COLORS[Math.floor(Math.random()*CROWD_COLORS.length)]; const dotSize=Math.max(1,2.5-i*0.5); targetCtx.fillRect(cx+Math.random()*3-1.5,cy+Math.random()*2-1,dotSize,dotSize);}}} if(i>0){targetCtx.fillStyle='rgba(0,0,0,0.1)'; targetCtx.fillRect(0,tierTopY,canvas.width,1);} currentTierY=tierTopY;} targetCtx.fillStyle=ROOF_COLOR; targetCtx.fillRect(0,0,canvas.width,15);}catch(e){console.error("drawStadiumBackground error",e);}finally{targetCtx.restore();} }
function drawGround() { if(typeof PITCH_TOP_Y==='undefined')return; ctx.save(); try{const g=ctx.createLinearGradient(0,PITCH_TOP_Y,0,PITCH_BOTTOM_Y); g.addColorStop(0,GRASS_COLOR_FAR); g.addColorStop(1,GRASS_COLOR_NEAR); ctx.fillStyle=g; ctx.fillRect(0,PITCH_TOP_Y,canvas.width,canvas.height-PITCH_TOP_Y);}catch(e){console.error("drawGround",e);}finally{ctx.restore();} }
function drawPitch() { if(typeof PITCH_TOP_Y==='undefined')return; ctx.save(); try{const g=ctx.createLinearGradient(0,PITCH_TOP_Y,0,PITCH_BOTTOM_Y); g.addColorStop(0,PITCH_COLOR_FAR); g.addColorStop(1,PITCH_COLOR_NEAR); ctx.fillStyle=g; ctx.beginPath(); ctx.moveTo(canvas.width/2-PITCH_FAR_WIDTH/2,PITCH_TOP_Y); ctx.lineTo(canvas.width/2+PITCH_FAR_WIDTH/2,PITCH_TOP_Y); ctx.lineTo(canvas.width/2+PITCH_NEAR_WIDTH/2,PITCH_BOTTOM_Y); ctx.lineTo(canvas.width/2-PITCH_NEAR_WIDTH/2,PITCH_BOTTOM_Y); ctx.closePath(); ctx.fill(); const cP=0.95; const cY=lerp(PITCH_TOP_Y,PITCH_BOTTOM_Y,cP); const cW=lerp(PITCH_FAR_WIDTH,PITCH_NEAR_WIDTH,cP); ctx.strokeStyle='rgba(255,255,255,0.7)'; ctx.lineWidth=2; ctx.beginPath(); ctx.moveTo(canvas.width/2-cW/2,cY); ctx.lineTo(canvas.width/2+cW/2,cY); ctx.stroke();}catch(e){console.error("drawPitch",e);}finally{ctx.restore();} }
function drawBoundary() { if(typeof canvas==='undefined')return; ctx.save(); try{ctx.strokeStyle=BOUNDARY_ROPE_COLOR; ctx.lineWidth=5; ctx.beginPath(); ctx.moveTo(-50,canvas.height-2); ctx.quadraticCurveTo(canvas.width/2,canvas.height-25,canvas.width+50,canvas.height-2); ctx.stroke(); ctx.lineWidth=2; ctx.fillStyle='rgba(255,255,255,0.3)'; try{ctx.fill();}catch(e){/*ign*/}}catch(e){console.error("drawBoundary",e);}finally{ctx.restore();} }
function drawDetailedWicket() { if(typeof WICKET_X==='undefined')return; ctx.save(); try{const sX=WICKET_X-WICKET_SPACING-WICKET_STUMP_WIDTH/2; for(let i=0;i<3;i++){const stX=sX+i*(WICKET_STUMP_WIDTH+WICKET_SPACING); ctx.fillStyle='rgba(0,0,0,0.1)'; ctx.beginPath(); ctx.ellipse(stX+WICKET_STUMP_WIDTH/2+3,WICKET_Y+WICKET_STUMP_HEIGHT-2,WICKET_STUMP_WIDTH/1.5,4,0,0,Math.PI*2); ctx.fill(); const grad=ctx.createLinearGradient(stX,WICKET_Y,stX+WICKET_STUMP_WIDTH,WICKET_Y); grad.addColorStop(0,WICKET_COLOR_DARK); grad.addColorStop(0.5,WICKET_COLOR_LIGHT); grad.addColorStop(1,WICKET_COLOR_DARK); ctx.fillStyle=grad; ctx.fillRect(stX,WICKET_Y,WICKET_STUMP_WIDTH,WICKET_STUMP_HEIGHT); ctx.beginPath(); ctx.arc(stX+WICKET_STUMP_WIDTH/2,WICKET_Y,WICKET_STUMP_WIDTH/2,Math.PI,0); ctx.fill();} if(gameState!=='OUT'){ctx.fillStyle=BAIL_COLOR; ctx.shadowColor='rgba(0,0,0,0.2)'; ctx.shadowBlur=3; ctx.shadowOffsetY=1; ctx.fillRect(sX+WICKET_STUMP_WIDTH/2-BAIL_LENGTH/2+(WICKET_STUMP_WIDTH+WICKET_SPACING)*0.5,WICKET_Y-BAIL_HEIGHT,BAIL_LENGTH,BAIL_HEIGHT); ctx.fillRect(sX+WICKET_STUMP_WIDTH/2-BAIL_LENGTH/2+(WICKET_STUMP_WIDTH+WICKET_SPACING)*1.5,WICKET_Y-BAIL_HEIGHT,BAIL_LENGTH,BAIL_HEIGHT);}}catch(e){console.error("drawDetailedWicket",e);}finally{ctx.restore();} }
function drawNonStrikerWicket() { if(typeof NS_WICKET_X==='undefined')return; ctx.save(); try{const startX=NS_WICKET_X-NS_WICKET_SPACING-NS_WICKET_STUMP_WIDTH/2; for(let i=0;i<3;i++){const stumpX=startX+i*(NS_WICKET_STUMP_WIDTH+NS_WICKET_SPACING); const gradient=ctx.createLinearGradient(stumpX,NS_WICKET_Y,stumpX+NS_WICKET_STUMP_WIDTH,NS_WICKET_Y); gradient.addColorStop(0,WICKET_COLOR_DARK); gradient.addColorStop(0.5,WICKET_COLOR_LIGHT); gradient.addColorStop(1,WICKET_COLOR_DARK); ctx.fillStyle=gradient; ctx.fillRect(stumpX,NS_WICKET_Y,NS_WICKET_STUMP_WIDTH,NS_WICKET_STUMP_HEIGHT); ctx.fillRect(stumpX,NS_WICKET_Y-NS_WICKET_STUMP_WIDTH/3,NS_WICKET_STUMP_WIDTH,NS_WICKET_STUMP_WIDTH/3);} if(gameState!=='OUT'){ctx.fillStyle=BAIL_COLOR; ctx.fillRect(startX+NS_WICKET_STUMP_WIDTH/2-NS_WICKET_BAIL_LENGTH/2+(NS_WICKET_STUMP_WIDTH+NS_WICKET_SPACING)*0.5,NS_WICKET_Y-NS_WICKET_BAIL_HEIGHT,NS_WICKET_BAIL_LENGTH,NS_WICKET_BAIL_HEIGHT); ctx.fillRect(startX+NS_WICKET_STUMP_WIDTH/2-NS_WICKET_BAIL_LENGTH/2+(NS_WICKET_STUMP_WIDTH+NS_WICKET_SPACING)*1.5,NS_WICKET_Y-NS_WICKET_BAIL_HEIGHT,NS_WICKET_BAIL_LENGTH,NS_WICKET_BAIL_HEIGHT);}}catch(e){console.error("drawNonStrikerWicket",e);}finally{ctx.restore();} }
function drawBallShadow() { if(!ball||ball.radius<=0||gameState==='READY'||typeof PITCH_TOP_Y==='undefined'){return;} ctx.save(); let sY,sX,sRX,sRY,sO; try{if(gameState==='BALL_HIT_OUTWARD'){const gp=1.0-ball.outwardProgress; sY=lerp(PITCH_BOTTOM_Y,PITCH_TOP_Y,gp); sX=ball.x; sRX=lerp(BALL_MAX_RADIUS*1.0,BALL_MAX_RADIUS*0.3,ball.outwardProgress); sRY=lerp(BALL_MAX_RADIUS*0.3,BALL_MAX_RADIUS*0.1,ball.outwardProgress); sO=lerp(0.2,0.05,ball.outwardProgress);}else{const cp=Math.max(0,ball.progress); sY=lerp(PITCH_TOP_Y,PITCH_BOTTOM_Y,cp); sX=ball.x; sRX=ball.radius*lerp(1.5,1.0,cp); sRY=ball.radius*lerp(0.5,0.3,cp); sO=lerp(0.05,0.2,cp);} ctx.fillStyle=`rgba(0,0,0,${clamp(sO,0,0.5)})`; ctx.beginPath(); ctx.ellipse(sX,sY,Math.max(1,sRX),Math.max(1,sRY),0,0,Math.PI*2); ctx.fill();}catch(e){console.error("drawBallShadow",e);}finally{ctx.restore();} }
function drawDetailedBall() { if(!ball||ball.radius<=0||gameState==='READY'){return;} ctx.save(); try{drawBallShadow(); const grad=ctx.createRadialGradient(ball.x-ball.radius*0.2,ball.y-ball.radius*0.3,ball.radius*0.1,ball.x,ball.y,ball.radius); grad.addColorStop(0,'#f44336'); grad.addColorStop(0.7,BALL_COLOR_MAIN); grad.addColorStop(1,BALL_COLOR_SHADOW); ctx.fillStyle=grad; ctx.beginPath(); ctx.arc(ball.x,ball.y,ball.radius,0,Math.PI*2); ctx.fill(); if(ball.radius>5){ctx.strokeStyle='rgba(0,0,0,0.3)'; ctx.lineWidth=Math.max(1,ball.radius*0.1); ctx.beginPath(); ctx.arc(ball.x,ball.y,ball.radius*0.8,Math.PI*0.6,Math.PI*1.4); ctx.stroke(); ctx.beginPath(); ctx.arc(ball.x,ball.y,ball.radius*0.8,Math.PI*-0.4,Math.PI*0.4); ctx.stroke();}}catch(e){console.error("drawDetailedBall",e);}finally{ctx.restore();} }
function drawBowler() { if(typeof bowler.x==='undefined')return; ctx.save(); try{const s=bowler.scale; const baseX=bowler.x; const baseY=bowler.y; const bW=8*s; const bH=15*s; const hS=6*s; const lH=12*s; const lW=3*s; const aW=2.5*s; const aH=10*s; const tT=baseY-lH-bH; const hT=tT-hS; const lT=baseY-lH; ctx.fillStyle=`rgba(0,0,0,0.1)`; ctx.beginPath(); ctx.ellipse(baseX,baseY+2*s,7*s,2*s,0,0,Math.PI*2); ctx.fill(); ctx.fillStyle=FIELDING_PANTS_WHITE; ctx.fillRect(baseX-bW/2,lT,lW,lH); ctx.fillRect(baseX+bW/2-lW,lT,lW,lH); ctx.fillStyle=FIELDING_SHIRT_GREEN; ctx.fillRect(baseX-bW/2-aW,tT+2*s,aW,aH); ctx.fillRect(baseX+bW/2,tT+2*s,aW,aH); ctx.fillStyle=FIELDING_SHIRT_GREEN; ctx.fillRect(baseX-bW/2,tT,bW,bH); ctx.fillStyle=FIELDING_SKIN_COLOR; ctx.fillRect(baseX-hS/2,hT,hS,hS); ctx.fillStyle=FIELDING_HAIR_COLOR; ctx.fillRect(baseX-hS/2,hT,hS,hS*0.4);}catch(e){console.error("drawBowler error",e);}finally{ctx.restore();} }
function drawFielder(x, y, scale) { if(typeof x==='undefined')return; ctx.save(); try{const s=scale; const baseX=x; const baseY=y; const bW=7*s; const bH=14*s; const hS=5*s; const lH=11*s; const lW=2.5*s; const aW=2*s; const aH=9*s; const tT=baseY-lH-bH; const hT=tT-hS; const lT=baseY-lH; ctx.fillStyle=`rgba(0,0,0,0.08)`; ctx.beginPath(); ctx.ellipse(baseX,baseY+1*s,5*s,1.5*s,0,0,Math.PI*2); ctx.fill(); ctx.fillStyle=FIELDING_PANTS_WHITE; ctx.fillRect(baseX-bW/2+0.5*s,lT,lW,lH); ctx.fillRect(baseX+bW/2-lW-0.5*s,lT,lW,lH); ctx.fillStyle=FIELDING_SHIRT_GREEN; ctx.fillRect(baseX-bW/2-aW,tT+1*s,aW,aH); ctx.fillRect(baseX+bW/2,tT+1*s,aW,aH); ctx.fillStyle=FIELDING_SHIRT_GREEN; ctx.fillRect(baseX-bW/2,tT,bW,bH); ctx.fillStyle=FIELDING_SKIN_COLOR; ctx.fillRect(baseX-hS/2,hT,hS,hS); ctx.fillStyle=FIELDING_HAIR_COLOR; ctx.fillRect(baseX-hS/2,hT,hS,hS*0.4);}catch(e){console.error("drawFielder error",e);}finally{ctx.restore();} }
function drawPixelBatsman() { if(typeof BATSMAN_SCALE==='undefined'){return;} ctx.save(); try{const s=BATSMAN_SCALE; const baseX=BATSMAN_CENTER_X; const baseY=BATSMAN_FEET_Y; ctx.fillStyle=SHADOW_COLOR; ctx.beginPath(); ctx.ellipse(baseX,PITCH_BOTTOM_Y,15*s,4*s,0,0,Math.PI*2); ctx.fill(); ctx.fillStyle=SHOE_BROWN; ctx.fillRect(baseX-7*s,baseY-5*s,6*s,5*s); ctx.fillRect(baseX+1*s,baseY-5*s,6*s,5*s); ctx.fillRect(baseX-8*s,baseY-3*s,3*s,3*s); ctx.fillRect(baseX+5*s,baseY-3*s,3*s,3*s); const pB=baseY-5*s; const pH=30*s; const pW=15*s; const pT=pB-pH; const pL=baseX-pW/2; ctx.fillStyle=PANTS_PADS_WHITE; ctx.fillRect(pL,pT,pW,pH); ctx.fillStyle=PAD_LINES; const lH=2*s; ctx.fillRect(pL-1*s,pT+10*s,pW+2*s,lH); ctx.fillRect(pL-1*s,pT+13*s,pW+2*s,lH); ctx.fillRect(pL-1*s,pT+20*s,pW+2*s,lH); ctx.fillRect(pL-1*s,pT+23*s,pW+2*s,lH); ctx.fillRect(baseX-1*s,pT+10*s,2*s,pH-10*s); const tB=pT; const tH=22*s; const tW=16*s; const tT=tB-tH; const tL=baseX-tW/2; ctx.fillStyle=PANTS_PADS_WHITE; ctx.fillRect(tL,tB-8*s,tW,8*s); ctx.fillStyle=BELT_BLACK; ctx.fillRect(tL,tB-9*s,tW,1*s); ctx.fillStyle=SHIRT_BLUE; ctx.fillRect(tL,tT,tW,14*s); const aY=tT+3*s; const aUW=5*s; const aUH=10*s; const aLW=5*s; const aLH=10*s; const gS=8*s; ctx.fillStyle=SKIN_TONE; ctx.fillRect(tL+tW-2*s,aY,aUW,aUH); ctx.fillStyle=GLOVES_GREY; ctx.fillRect(tL+tW-1*s,aY+aUH-2*s,gS,gS); ctx.fillStyle=SKIN_TONE; ctx.fillRect(tL-3*s,aY,aUW,aUH); ctx.fillRect(tL-aLW-1*s,aY+aUH,aLW,aLH); ctx.fillStyle=GLOVES_GREY; ctx.fillRect(tL-gS+1*s,aY+aUH+aLH-2*s,gS,gS); ctx.fillRect(tL-gS-2*s,aY+aUH+aLH+1*s,3*s,4*s); ctx.fillStyle=SKIN_TONE; ctx.fillRect(baseX-2*s,tT-3*s,4*s,3*s); const hB=tT-3*s; const hS=10*s; const hT=hB-hS; ctx.fillStyle=SKIN_TONE; ctx.fillRect(baseX-5*s,hT,hS,hS); const helB=hT+2*s; const helH=12*s; const helW=14*s; const helT=helB-helH; const helL=baseX-helW/2; ctx.fillStyle=HELMET_RED; ctx.fillRect(helL,helT,helW,helH); ctx.fillRect(helL-1*s,helT+2*s,1*s,helH-4*s); ctx.fillRect(helL+helW,helT+2*s,1*s,helH-4*s); ctx.fillRect(helL+2*s,helT-1*s,helW-4*s,1*s); ctx.fillStyle=HELMET_BLUE; ctx.fillRect(helL-helW*0.1,helB-1*s,helW*0.8,3*s); ctx.fillRect(helL-2*s,helB-1*s,2*s,2*s); ctx.fillStyle=HELMET_GRILL; const grT=helT+6*s; const grH=7*s; ctx.fillRect(baseX-7*s,grT,5*s,grH); ctx.fillStyle='#757575'; ctx.fillRect(baseX-7*s,grT+2*s,5*s,1*s); ctx.fillRect(baseX-7*s,grT+4*s,5*s,1*s);
        // Swinging Bat
        if(bat.width&&(bat.swinging||(bat.swingDirection===-1&&bat.swingAngle>0))){ctx.save(); ctx.translate(bat.x,bat.y); ctx.rotate(bat.swingAngle); const cH=bat.height; const cHH=bat.handleHeight; const cW=bat.width; const bFY=-cH/2+cHH/2; const hY=bFY-cHH; const fg=ctx.createLinearGradient(-cW/2,0,cW/2,0); fg.addColorStop(0,BAT_COLOR_EDGE); fg.addColorStop(0.3,BAT_COLOR_FACE); fg.addColorStop(0.7,BAT_COLOR_FACE); fg.addColorStop(1,BAT_COLOR_EDGE); ctx.fillStyle=fg; const sc=s/1.8; ctx.beginPath(); ctx.moveTo(-cW/2,hY+cHH*0.7); ctx.lineTo(-cW/2,bFY+(cH-cHH)/2-10*sc); ctx.quadraticCurveTo(0,bFY+(cH-cHH)/2,cW/2,bFY+(cH-cHH)/2-10*sc); ctx.lineTo(cW/2,hY+cHH*0.7); ctx.closePath(); ctx.fill(); ctx.strokeStyle=BAT_COLOR_EDGE; ctx.lineWidth=2; ctx.stroke(); ctx.fillStyle=BAT_HANDLE_COLOR; ctx.fillRect(-cW/3,hY,cW*2/3,cHH*0.8); ctx.strokeStyle='rgba(255,255,255,0.2)'; ctx.lineWidth=1.5; for(let gy=hY+4; gy<hY+cHH*0.8-2; gy+=5){ctx.beginPath(); ctx.moveTo(-cW/3+2,gy); ctx.lineTo(cW/3-2,gy+2); ctx.stroke();} ctx.restore();}}
    catch(e){console.error("drawPxBatsman",e);} finally {ctx.restore();} }

// Master Draw Function
function draw() {
    if (!ctx || typeof HORIZON_Y === 'undefined') { return; }
     try {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // 1. Static Background
        if (staticBackgroundRendered && offscreenCanvas) { ctx.drawImage(offscreenCanvas, 0, 0); } else { drawStadiumBackground(ctx); }
        // 2. Ground & Pitch
        drawGround(); drawPitch();
        // 3. Far Wicket & Bowler
        drawNonStrikerWicket(); drawBowler();
        // 4. Fielders
        drawFielder(FIELDER_LEFT_X, FIELDER_LEFT_Y, FIELDER_SCALE);
        drawFielder(FIELDER_RIGHT_X, FIELDER_RIGHT_Y, FIELDER_SCALE);
        // 5. Boundary Rope
        drawBoundary();
        // 6. Near Wicket
        drawDetailedWicket();
        // 7. Ball and Batsman
        const bFY=BATSMAN_FEET_Y; let bIV=ball&&ball.radius>0&&gameState!=='READY'; let bGY=PITCH_BOTTOM_Y; if(bIV){try{if(gameState==='PLAYING'||gameState==='SWINGING'||gameState==='MISS'){bGY=lerp(PITCH_TOP_Y,PITCH_BOTTOM_Y,Math.max(0,ball.progress));}else if(gameState==='BALL_HIT_OUTWARD'){bGY=lerp(PITCH_BOTTOM_Y,PITCH_TOP_Y,1.0-ball.outwardProgress);}}catch(le){bIV=false; bGY=canvas.height+100;}}else{bGY=canvas.height+100;}
        if(bGY<bFY-20*BATSMAN_SCALE){if(bIV)drawDetailedBall(); drawPixelBatsman();}else{drawPixelBatsman(); if(bIV)drawDetailedBall();}
    } catch (e) { console.error("Draw error:", e); if(animationFrameId){cancelAnimationFrame(animationFrameId); animationFrameId=null;} gameState='ERROR'; if(messageBoard){messageBoard.textContent="Render Error!"; messageBoard.style.backgroundColor='red';} }
}

// --- Game Logic ---
function updateBallPositionAndScale() { if(!ball||ball.radius<=0||typeof PITCH_TOP_Y==='undefined'){return;} try{if(gameState==='BALL_HIT_OUTWARD'){ball.x=lerp(ball.impactX,ball.outwardTargetX,ball.outwardProgress); ball.y=lerp(ball.impactY,ball.outwardTargetY,ball.outwardProgress); ball.radius=lerp(BALL_MAX_RADIUS,BALL_MAX_RADIUS*BALL_START_SCALE*0.5,ball.outwardProgress);}else if(gameState==='PLAYING'||gameState==='SWINGING'||gameState==='MISS'){const cp=Math.max(0,ball.progress); let ctX=lerp(ball.startX,ball.targetX+ball.angleOffsetX*cp*cp,cp); ball.x=lerp(ball.startX,ctX,cp); let gY=lerp(ball.startY,PITCH_BOTTOM_Y,cp); let aZ=0; if(cp>=0){let ap=ball.progress; let pf=Math.PI; aZ=ball.arcHeight*Math.sin(ap*pf); if(ap>=ball.bounceFactor){if(!ball.bounced)ball.bounced=true; let pAB=clamp((ap-ball.bounceFactor)/(1-ball.bounceFactor),0,1); let bF=0.1; let aAB=ball.arcHeight*Math.sin(ball.bounceFactor*pf); aZ=aAB*bF*(1-Math.sin(pAB*Math.PI/2));} let gE=(ap*ap)*GRAVITY_EFFECT_FACTOR; aZ=Math.max(0,aZ-gE);} let vAE=aZ*lerp(0.5,1,cp); ball.y=gY-vAE; ball.radius=lerp(BALL_MAX_RADIUS*BALL_START_SCALE,BALL_MAX_RADIUS,cp);} ball.radius=Math.max(1,ball.radius);}catch(e){console.error("updateBallPosScale error",e);} }
function updateBall() { if(!ball||ball.radius<=0||typeof WICKET_HITBOX_LEFT==='undefined'||!(gameState==='PLAYING'||gameState==='SWINGING'||gameState==='MISS'||gameState==='BALL_HIT_OUTWARD')){return;} try{if(gameState==='PLAYING'||gameState==='SWINGING'||gameState==='MISS'){let pSF=lerp(SPEED_PROGRESS_FACTOR_MIN,SPEED_PROGRESS_FACTOR_MAX,ball.progress); let cES=ball.baseSpeed*pSF; ball.progress+=cES; ball.progress=Math.min(ball.progress,1.05); updateBallPositionAndScale(); if(ball.progress>=1.0){const bL=ball.x-ball.radius; const bR=ball.x+ball.radius; const bT=ball.y-ball.radius; const bB=ball.y+ball.radius; if(bR>=WICKET_HITBOX_LEFT&&bL<=WICKET_HITBOX_RIGHT&&bB>=WICKET_HITBOX_TOP&&bT<=WICKET_HITBOX_BOTTOM){if(gameState!=='BALL_HIT_OUTWARD' && gameState !== 'OUT'){ console.log("Wicket Hit!"); if(wicketSound){ wicketSound.play().catch(e=>console.warn("Sound play failed:",e)); } gameState='OUT'; if(messageBoard){messageBoard.textContent='OUT!'; messageBoard.style.display='block'; messageBoard.style.backgroundColor='rgba(211,47,47,0.85)';} if(restartButton)restartButton.style.display='block';}}else if(gameState!=='BALL_HIT_OUTWARD'&&gameState!=='OUT'){if(gameState!=='MISS'){gameState='MISS'; console.log("Miss/Passed."); if(messageBoard){messageBoard.textContent='Miss!'; messageBoard.style.display='block'; messageBoard.style.backgroundColor='rgba(211,47,47,0.85)';}} gameState='WAITING_FOR_RESET'; setTimeout(()=>{if(gameState==='WAITING_FOR_RESET'){if(messageBoard)messageBoard.style.display='none'; ball={}; startBowlingSequence();}},1000);}}}else if(gameState==='BALL_HIT_OUTWARD'){ball.outwardProgress+=ball.outwardSpeed; ball.outwardProgress=Math.min(ball.outwardProgress,1.0); ball.outwardSpeed*=OUTWARD_FRICTION; updateBallPositionAndScale(); if(ball.outwardSpeed<MIN_OUTWARD_SPEED||ball.outwardProgress>=1.0){let runs=0; if(ball.outwardProgress>=OUTWARD_PROGRESS_6)runs=6; else if(ball.outwardProgress>=OUTWARD_PROGRESS_4)runs=4; else if(ball.outwardProgress>=OUTWARD_PROGRESS_2)runs=2; else if(ball.outwardProgress>=OUTWARD_PROGRESS_1)runs=1; if(runs>0){score+=runs; updateScoreboard(); levelUpCheck();} if(messageBoard){messageBoard.textContent=(runs>0)?`${runs} Run${runs!==1?'s':''}`:"Dot Ball"; messageBoard.style.display='block'; messageBoard.style.backgroundColor=(runs>0)?'rgba(76,175,80,0.85)':'rgba(33,150,243,0.85)';} gameState='WAITING_FOR_RESET'; setTimeout(()=>{if(gameState==='WAITING_FOR_RESET'){if(messageBoard){messageBoard.style.display='none'; messageBoard.style.backgroundColor='rgba(211,47,47,0.85)';} ball={}; startBowlingSequence();}},1200);}}}catch(e){console.error("updateBall error",e); gameState='ERROR'; if(messageBoard){messageBoard.textContent='Update Error!'; messageBoard.style.backgroundColor='red';}}}
function updateBatSwing() { if(!bat||typeof bat.swingSpeed==='undefined')return; if(bat.swinging){bat.swingAngle+=bat.swingSpeed*bat.swingDirection; if(bat.swingAngle>=bat.maxSwingAngle&&bat.swingDirection===1){bat.swingAngle=bat.maxSwingAngle; bat.swingDirection=-1;} if(bat.swingAngle<=0&&bat.swingDirection===-1){bat.swingAngle=0; bat.swinging=false; bat.swingDirection=1;}}}
function checkCollision() { if(!bat.swinging||gameState!=='SWINGING'||!ball||ball.radius<=0||!bat.width)return; try{const hZS=0.85; const hZE=1.0; if(ball.progress>=hZS&&ball.progress<=hZE){ctx.save(); ctx.translate(bat.x,bat.y); ctx.rotate(bat.swingAngle); const lBR={x:-bat.width/2,y:-bat.height/2+bat.handleHeight/2,w:bat.width,h:bat.height}; const dx=ball.x-bat.x; const dy=ball.y-bat.y; const lBX=dx*Math.cos(-bat.swingAngle)-dy*Math.sin(-bat.swingAngle); const lBY=dx*Math.sin(-bat.swingAngle)+dy*Math.cos(-bat.swingAngle); ctx.restore(); const cX=clamp(lBX,lBR.x,lBR.x+lBR.w); const cY=clamp(lBY,lBR.y,lBR.y+lBR.h); const dist=Math.sqrt((lBX-cX)**2+(lBY-cY)**2); if(dist<ball.radius){console.log("HIT!"); let optP=0.93; let tD=Math.abs(ball.progress-optP); let hP=clamp(1.0-(tD/0.12),0.2,1.0); ball.outwardSpeed=hP*HIT_POWER_FACTOR; ball.outwardProgress=0; ball.impactX=ball.x; ball.impactY=ball.y; let hAF=clamp(lBX/(bat.width/2),-1,1); let tXO=(0.5-hP*0.5)*OUTWARD_TARGET_X_SPREAD*-hAF; ball.outwardTargetX=clamp(canvas.width/2+tXO,canvas.width*0.1,canvas.width*0.9); ball.outwardTargetY=OUTWARD_TARGET_Y; gameState='BALL_HIT_OUTWARD';}}}catch(e){console.error("checkCollision error",e); gameState='ERROR'; if(messageBoard){messageBoard.textContent='Collision Error!'; messageBoard.style.backgroundColor='red';}}}

// --- Game Loop ---
function gameLoop() { if(gameState==='OUT'||gameState==='ERROR'){console.log("Loop stopping:",gameState); if(animationFrameId){cancelAnimationFrame(animationFrameId); animationFrameId=null;} return;} if(typeof HORIZON_Y==='undefined'&&gameState!=='LOADING'){console.error("Loop running pre-init!"); gameState='ERROR'; return;} try{if(gameState==='PLAYING'||gameState==='SWINGING'||gameState==='MISS'){updateBatSwing(); updateBall(); if(gameState==='SWINGING')checkCollision();}else if(gameState==='BALL_HIT_OUTWARD'){updateBall(); updateBatSwing();}else if(gameState==='WAITING_FOR_RESET'){updateBatSwing();} draw(); if(gameState!=='OUT'&&gameState!=='ERROR'){animationFrameId=requestAnimationFrame(gameLoop);}else{animationFrameId=null;}}catch(e){console.error("Game loop error:",e); gameState='ERROR'; if(animationFrameId){cancelAnimationFrame(animationFrameId); animationFrameId=null;} if(messageBoard){messageBoard.textContent="Loop Error!"; messageBoard.style.backgroundColor='red';}}}

// --- Event Listeners ---
if(canvas){canvas.addEventListener('click',()=>{console.log("Click. gameState:",gameState); if(gameState==='READY'&&typeof HORIZON_Y!=='undefined'){startBowlingSequence(); if(!animationFrameId){console.log("Starting loop from click."); animationFrameId=requestAnimationFrame(gameLoop);}}else if(gameState==='PLAYING'&&!bat.swinging){if(ball&&ball.progress<0.98){console.log("Swing"); bat.swinging=true; bat.swingDirection=1; bat.swingAngle=0; gameState='SWINGING';}else{console.log("No swing.");}}else{console.log("Click ignored.");}});}
if(restartButton){restartButton.addEventListener('click',()=>{console.log("Restart."); if(animationFrameId){cancelAnimationFrame(animationFrameId); animationFrameId=null;} setupInitialState();});}

// --- Initial Setup ---
document.addEventListener('DOMContentLoaded',(e)=>{
    console.log("DOMContentLoaded."); if(!canvas||!ctx){console.error("Canvas/ctx lost!");return;} if(typeof HORIZON_Y === 'undefined'){ if(!initializeDimensions()){ console.error("Dimension Init Failed!"); return; } console.log("Creating offscreen canvas for background..."); offscreenCanvas = document.createElement('canvas'); offscreenCanvas.width = canvas.width; offscreenCanvas.height = canvas.height; offscreenCtx = offscreenCanvas.getContext('2d'); if (offscreenCtx) { console.log("Rendering static background to offscreen canvas..."); try { drawStadiumBackground(offscreenCtx); staticBackgroundRendered = true; console.log("Offscreen background rendered."); } catch (renderError) { console.error("Error rendering to offscreen canvas:", renderError); staticBackgroundRendered = false; } } else { console.error("Failed to get offscreen canvas context!"); staticBackgroundRendered = false; } } setupInitialState(); console.log("Setup complete.");
});
console.log("Script end.");